@startuml

interface FlyBehavior{
    void fly()
}
class FlyBehavior1{
    void fly()
}
class FlyBehavior2{
    void fly()
}

interface QuackBehavior{
    void quack()
}
class QuackBehavior1{
    void quack()
}
class QuackBehavior2{
    void quack()
}

abstract class Duck{
    # FlyBehavior fb
    # QuackBehavior qb
    void performFly()
    void performQuack()
    void swim()
    abstract void display()
}
note top
void performFly(){
    fb.fly();
}
void performQuack(){
    qb.quack();
}
end note
class Duck1{
    void display()
}
class Duck2{
    void display()
}

class Client{}
note left
其他依赖关系就不画了
main(){
    Duck d = new Duck1();
    FlyBehavior f1 = new FlyBehavior1();
    d.setFlyBehavior(f1);
    d.performFly();

    // 运行时替换
    FlyBehavior f2 = new FlyBehavior2();
    d.setFlyBehavior(f2);
    d.performFly();
}
end note

Client .> Duck
Client ..> FlyBehavior
Duck <|-- Duck1
Duck <|-- Duck2
Duck o-- FlyBehavior
Duck o-- QuackBehavior
FlyBehavior <|.. FlyBehavior1
FlyBehavior <|.. FlyBehavior2
QuackBehavior <|.. QuackBehavior1
QuackBehavior <|.. QuackBehavior2

@enduml