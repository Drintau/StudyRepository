@startuml

abstract class AbstractComponent{
    void m1()
}
note top of AbstractComponent: 前提：原作者的类，不能修改
class Component1{
    void m1()
}

abstract class AbstractDecorator{
    AbstractComponent ac
    public AbstractDecorator(AbstractComponent c)
}
note top of AbstractDecorator
装饰者：继承需要装饰的类，并持有对方的引用
end note
note right of AbstractDecorator
protected AbstractComponent ac;
public AbstractDecorator(AbstractComponent c){
    super();
    this.ac = c;
}
end note
class Decorator1{
    public Decorator1(AbstractComponent c)
    void m1()
}
note right of Decorator1
public Decorator1(AbstractComponent c){
    super(c);
}
public void m1(){
    ac.m1();
    // 扩展的功能
}
end note
class Decorator2{
    public Decorator2(AbstractComponent c)
    void m1()
}

AbstractComponent <|-- Component1
AbstractComponent <|- AbstractDecorator : 继承
AbstractComponent -o AbstractDecorator : 聚合，持有引用
AbstractDecorator <|-- Decorator1
AbstractDecorator <|-- Decorator2

@enduml